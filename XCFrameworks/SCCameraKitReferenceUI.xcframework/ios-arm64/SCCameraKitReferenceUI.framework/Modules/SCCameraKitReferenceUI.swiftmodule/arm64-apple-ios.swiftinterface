// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name SCCameraKitReferenceUI
import ARKit
import AVFoundation
import AVKit
import DeveloperToolsSupport
import Foundation
import Photos
@_exported import SCCameraKitReferenceUI
import SCSDKCameraKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol CameraControllerUIDelegate : AnyObject {
  func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, updatedLenses lenses: [any SCSDKCameraKit.Lens])
  func cameraControllerRequestedActivityIndicatorShow(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedActivityIndicatorHide(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedRingLightShow(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedRingLightHide(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedFlashControlHide(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedSnapAttributionViewShow(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedSnapAttributionViewHide(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraControllerRequestedCameraFlip(_ controller: SCCameraKitReferenceUI.CameraController)
  func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, requestedHintDisplay hint: Swift.String, for lens: any SCSDKCameraKit.Lens, autohide: Swift.Bool)
  func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, requestedHintHideFor lens: any SCSDKCameraKit.Lens)
}
@objc open class CameraController : ObjectiveC.NSObject, SCSDKCameraKit.LensRepositoryGroupObserver, SCSDKCameraKit.LensPrefetcherObserver, SCSDKCameraKit.LensHintDelegate, SCCameraKitReferenceUI.MediaPickerViewDelegate, SCCameraKitReferenceUI.AdjustmentControlViewDelegate {
  final public let captureSession: AVFoundation.AVCaptureSession
  final public let cameraKit: any SCSDKCameraKit.CameraKitProtocol
  public var cameraPosition: AVFoundation.AVCaptureDevice.Position {
    get
  }
  public var photoCaptureOutput: SCSDKCameraKit.PhotoCaptureOutput? {
    get
  }
  public var recorder: SCCameraKitReferenceUI.Recorder?
  final public let lensMediaProvider: SCSDKCameraKit.LensMediaPickerProviderPhotoLibrary
  weak public var snapchatDelegate: (any SCCameraKitReferenceUI.SnapchatDelegate)?
  weak public var uiDelegate: (any SCCameraKitReferenceUI.CameraControllerUIDelegate)?
  public var currentLens: (any SCSDKCameraKit.Lens)? {
    get
  }
  public var groupIDs: [Swift.String] {
    get
    set
  }
  public var isToneMapAdjustmentAvailable: Swift.Bool {
    get
  }
  public var isPortraitAdjustmentAvailable: Swift.Bool {
    get
  }
  public var flashState: SCCameraKitReferenceUI.CameraController.FlashState {
    get
    set
  }
  convenience public init(sessionConfig: SCSDKCameraKit.SessionConfig? = nil)
  public init(cameraKit: any SCSDKCameraKit.CameraKitProtocol, captureSession: AVFoundation.AVCaptureSession)
  public func configure(orientation: AVFoundation.AVCaptureVideoOrientation, textInputContextProvider: (any SCSDKCameraKit.TextInputContextProvider)?, agreementsPresentationContextProvider: (any SCSDKCameraKit.AgreementsPresentationContextProvider)?, completion: (() -> Swift.Void)?)
  open func configureLenses(orientation: AVFoundation.AVCaptureVideoOrientation, textInputContextProvider: (any SCSDKCameraKit.TextInputContextProvider)?, agreementsPresentationContextProvider: (any SCSDKCameraKit.AgreementsPresentationContextProvider)?)
  open func configureDataProvider() -> SCSDKCameraKit.DataProviderComponent
  public func zoomExistingLevel(by factor: CoreFoundation.CGFloat)
  public func finalizeZoom()
  public func flipCamera()
  public struct PointOfInterestOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let exposure: SCCameraKitReferenceUI.CameraController.PointOfInterestOptions
    public static let focus: SCCameraKitReferenceUI.CameraController.PointOfInterestOptions
    public typealias ArrayLiteralElement = SCCameraKitReferenceUI.CameraController.PointOfInterestOptions
    public typealias Element = SCCameraKitReferenceUI.CameraController.PointOfInterestOptions
    public typealias RawValue = Swift.Int
  }
  public func setPointOfInterest(at point: CoreFoundation.CGPoint, for options: SCCameraKitReferenceUI.CameraController.PointOfInterestOptions = [.exposure, .focus])
  open func takePhoto(completion: ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)?)
  @objc open func repository(_ repository: any SCSDKCameraKit.LensRepository, didUpdateLenses lenses: [any SCSDKCameraKit.Lens], forGroupID groupID: Swift.String)
  @objc open func repository(_ repository: any SCSDKCameraKit.LensRepository, didFailToUpdateLensesForGroupID groupID: Swift.String, error: (any Swift.Error)?)
  @objc public func prefetcher(_ prefetcher: any SCSDKCameraKit.LensPrefetcher, didUpdate lens: any SCSDKCameraKit.Lens, status: SCSDKCameraKit.LensFetchStatus)
  open func configureRecorder()
  open func startRecording()
  open func cancelRecording()
  open func finishRecording(completion: ((Foundation.URL?, (any Swift.Error)?) -> Swift.Void)?)
  public func applyLens(_ lens: any SCSDKCameraKit.Lens, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func clearLens(willReapply: Swift.Bool = false, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func reapplyCurrentLens()
  public func enableToneMapAdjustment() -> Swift.Float?
  public func disableToneMapAdjustment()
  public func enablePortraitAdjustment() -> Swift.Float?
  public func disablePortraitAdjustment()
  @objc public func lensProcessor(_ lensProcessor: any SCSDKCameraKit.LensProcessor, shouldDisplayHint hint: Swift.String, for lens: any SCSDKCameraKit.Lens, autohide: Swift.Bool)
  @objc public func lensProcessor(_ lensProcessor: any SCSDKCameraKit.LensProcessor, shouldHideAllHintsFor lens: any SCSDKCameraKit.Lens)
  public func mediaPickerView(_ mediaPickerView: SCCameraKitReferenceUI.MediaPickerView, selectedAsset: any SCSDKCameraKit.LensMediaPickerProviderAsset)
  public func adjustmentControlView(_ control: SCCameraKitReferenceUI.AdjustmentControlView, sliderValueChanged value: Swift.Double)
  public var brightnessToRestore: CoreFoundation.CGFloat?
  @objc deinit
}
extension SCCameraKitReferenceUI.CameraController {
  public enum FlashMode : Swift.Int {
    case standard
    case ring
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum FlashState : Swift.Equatable {
    case off
    case on(SCCameraKitReferenceUI.CameraController.FlashMode)
    public var captureDeviceFlashMode: AVFoundation.AVCaptureDevice.FlashMode {
      get
    }
    public var captureDeviceTorchMode: AVFoundation.AVCaptureDevice.TorchMode {
      get
    }
    public static func == (a: SCCameraKitReferenceUI.CameraController.FlashState, b: SCCameraKitReferenceUI.CameraController.FlashState) -> Swift.Bool
  }
  public func enableFlash()
  public func disableFlash()
  public func restoreBrightnessIfNecessary()
  public func increaseBrightnessIfNecessary()
}
public protocol CameraButtonDelegate : AnyObject {
  func cameraButtonTapped(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  func cameraButtonHoldBegan(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  func cameraButtonHoldCancelled(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  func cameraButtonHoldEnded(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CameraButton : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  public enum Constants {
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.CameraButtonDelegate)?
  @_Concurrency.MainActor @preconcurrency public var minimumHoldDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var ringWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var allowWhileRecording: [UIKit.UIGestureRecognizer]
  @_Concurrency.MainActor @preconcurrency public var ringColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tapGestureRecognizer: UIKit.UITapGestureRecognizer {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var pressGestureRecognizer: UIKit.UILongPressGestureRecognizer {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func startRecordingAnimation(ringFillDuration: Foundation.TimeInterval = 10.0, maxRecordingDuration: Foundation.TimeInterval = 60.0)
  @_Concurrency.MainActor @preconcurrency public func stopRecordingAnimation()
}
extension SCCameraKitReferenceUI.CameraButton : QuartzCore.CAAnimationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
}
public protocol AdjustmentControlViewDelegate : AnyObject {
  func adjustmentControlView(_ control: SCCameraKitReferenceUI.AdjustmentControlView, sliderValueChanged value: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AdjustmentControlView : UIKit.UIView {
  public enum Variant : Swift.Int {
    case tone
    case portrait
    public var label: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.AdjustmentControlViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var intensityValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let primaryLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let secondaryLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
extension SCCameraKitReferenceUI.AdjustmentControlView : SCCameraKitReferenceUI.ControlSliderDelegate {
  @_Concurrency.MainActor @preconcurrency public func controlSlider(_ slider: SCCameraKitReferenceUI.ControlSlider, updatedValue value: Swift.Float, done: Swift.Bool)
}
public protocol ControlSliderDelegate : AnyObject {
  func controlSlider(_ slider: SCCameraKitReferenceUI.ControlSlider, updatedValue value: Swift.Float, done: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ControlSlider : UIKit.UISlider {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.ControlSliderDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setValue(_ value: Swift.Float, animated: Swift.Bool)
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @preconcurrency public func setThumbColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CameraActionsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var flipCameraButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var flashToggleButtonBaseSelectedImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var flashActionView: SCCameraKitReferenceUI.CameraConfigurableActionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setupFlashToggleButtonForFront()
  @_Concurrency.MainActor @preconcurrency public func setupFlashToggleButtonForBack()
  @_Concurrency.MainActor @preconcurrency public var toneMapActionView: SCCameraKitReferenceUI.CameraConfigurableActionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var portraitActionView: SCCameraKitReferenceUI.CameraConfigurableActionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func collapse()
  @_Concurrency.MainActor @preconcurrency public func expand()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CameraConfigurableActionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var configurable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var toggleButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var configurationButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let blurEffectView: UIKit.UIVisualEffectView
  @_Concurrency.MainActor @preconcurrency public func collapse()
  @_Concurrency.MainActor @preconcurrency public func expand()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public var enableAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var disableAction: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var showActionSettings: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var hideActionSettings: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var toggleActionSettingsVisibility: (() -> Swift.Void)?
  @objc deinit
}
public protocol RingLightColorSelectionViewDelegate : AnyObject {
  func ringLightColorSelectionView(_ view: SCCameraKitReferenceUI.RingLightColorSelectionView, selectedColor color: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class RingLightColorSelectionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.RingLightColorSelectionViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
extension SCCameraKitReferenceUI.RingLightColorSelectionView {
  @_Concurrency.MainActor @preconcurrency public func performInitialSelection(indexPath: Foundation.IndexPath = IndexPath(row: 0, section: 0))
}
extension SCCameraKitReferenceUI.RingLightColorSelectionView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
}
extension SCCameraKitReferenceUI.RingLightColorSelectionView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RingLightColorSelectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency public static let reuseIdentifer: Swift.String
  @_Concurrency.MainActor @preconcurrency public func setColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func highlight()
  @_Concurrency.MainActor @preconcurrency public func unhighlight()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RingLightGradientView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func updateIntensity(to intensity: CoreFoundation.CGFloat, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func changeColor(to color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RingLightView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let topBorder: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let bottomBorder: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let ringLightGradient: SCCameraKitReferenceUI.RingLightGradientView
  @_Concurrency.MainActor @preconcurrency public func changeColor(to color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FlashControlViewDelegate : AnyObject {
  func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, selectedRingLightColor color: UIKit.UIColor)
  func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, updatedRingLightValue value: Swift.Float)
  func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, updatedFlashMode flashMode: SCCameraKitReferenceUI.CameraController.FlashMode)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class FlashControlView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.FlashControlViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var ringLightIntensityValue: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let primaryLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var flashModeSelectionView: SCCameraKitReferenceUI.FlashModeSelectionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var ringLightColorSelectionView: SCCameraKitReferenceUI.RingLightColorSelectionView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
extension SCCameraKitReferenceUI.FlashControlView : SCCameraKitReferenceUI.FlashModeSelectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func flashModeSelectionView(_ view: SCCameraKitReferenceUI.FlashModeSelectionView, updatedMode mode: SCCameraKitReferenceUI.CameraController.FlashMode)
}
extension SCCameraKitReferenceUI.FlashControlView : SCCameraKitReferenceUI.ControlSliderDelegate {
  @_Concurrency.MainActor @preconcurrency public func controlSlider(_ slider: SCCameraKitReferenceUI.ControlSlider, updatedValue value: Swift.Float, done: Swift.Bool)
}
extension SCCameraKitReferenceUI.FlashControlView : SCCameraKitReferenceUI.RingLightColorSelectionViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func ringLightColorSelectionView(_ view: SCCameraKitReferenceUI.RingLightColorSelectionView, selectedColor color: UIKit.UIColor)
}
public protocol FlashModeSelectionViewDelegate : AnyObject {
  func flashModeSelectionView(_ view: SCCameraKitReferenceUI.FlashModeSelectionView, updatedMode mode: SCCameraKitReferenceUI.CameraController.FlashMode)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class FlashModeSelectionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.FlashModeSelectionViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var flashMode: SCCameraKitReferenceUI.CameraController.FlashMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CameraView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let previewView: SCSDKCameraKit.PreviewView
  @_Concurrency.MainActor @preconcurrency final public let cameraBottomBar: SCCameraKitReferenceUI.CameraBottomBar
  @_Concurrency.MainActor @preconcurrency final public let hintLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let lensLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let ringLightView: SCCameraKitReferenceUI.RingLightView
  @_Concurrency.MainActor @preconcurrency final public let cameraActionsView: SCCameraKitReferenceUI.CameraActionsView
  @_Concurrency.MainActor @preconcurrency public var flashControlView: SCCameraKitReferenceUI.FlashControlView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let flashControlDismissalHint: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let toneMapControlView: SCCameraKitReferenceUI.AdjustmentControlView
  @_Concurrency.MainActor @preconcurrency final public let toneMapControlDismissalHintLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let portraitControlView: SCCameraKitReferenceUI.AdjustmentControlView
  @_Concurrency.MainActor @preconcurrency final public let portraitControlDismissalHintLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let carouselView: SCCameraKitReferenceUI.CarouselView
  @_Concurrency.MainActor @preconcurrency final public let cameraButton: SCCameraKitReferenceUI.CameraButton
  @_Concurrency.MainActor @preconcurrency public var mediaPickerView: SCCameraKitReferenceUI.MediaPickerView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let messageView: SCCameraKitReferenceUI.MessageNotificationView
  @_Concurrency.MainActor @preconcurrency final public let snapAttributionView: SCCameraKitReferenceUI.SnapAttributionView
  @_Concurrency.MainActor @preconcurrency final public let activityIndicator: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension SCCameraKitReferenceUI.CameraView {
  @_Concurrency.MainActor @preconcurrency public func showMessage(text: Swift.String, numberOfLines: Swift.Int, duration: Foundation.TimeInterval = 1.5)
}
extension SCCameraKitReferenceUI.CameraView {
  @_Concurrency.MainActor @preconcurrency public func setupActivityIndicator()
}
extension SCCameraKitReferenceUI.CameraView {
  @_Concurrency.MainActor @preconcurrency public var isAnyControlVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func hideAllControls()
}
extension SCCameraKitReferenceUI.CameraView {
  @_Concurrency.MainActor @preconcurrency public func drawTapAnimationView(at point: CoreFoundation.CGPoint)
}
public protocol AppOrientationDelegate : AnyObject {
  func lockOrientation(_ orientation: UIKit.UIInterfaceOrientationMask)
  func unlockOrientation()
}
@objc @_Concurrency.MainActor @preconcurrency open class CameraViewController : UIKit.UIViewController, SCCameraKitReferenceUI.CameraControllerUIDelegate {
  @_Concurrency.MainActor @preconcurrency final public let cameraController: SCCameraKitReferenceUI.CameraController
  @_Concurrency.MainActor @preconcurrency weak public var appOrientationDelegate: (any SCCameraKitReferenceUI.AppOrientationDelegate)?
  @_Concurrency.MainActor @preconcurrency final public let cameraView: SCCameraKitReferenceUI.CameraView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency convenience public init(repoGroups: [Swift.String], sessionConfig: SCSDKCameraKit.SessionConfig? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(cameraKit: any SCSDKCameraKit.CameraKitProtocol, captureSession: AVFoundation.AVCaptureSession, repoGroups: [Swift.String])
  @_Concurrency.MainActor @preconcurrency public init(cameraController: SCCameraKitReferenceUI.CameraController)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func getMessage(lens: any SCSDKCameraKit.Lens) -> Swift.String
  @_Concurrency.MainActor @preconcurrency open func showMessage(lens: any SCSDKCameraKit.Lens)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency open func applyLens(_ lens: any SCSDKCameraKit.Lens)
  @_Concurrency.MainActor @preconcurrency open func clearLens()
  @_Concurrency.MainActor @preconcurrency open func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, updatedLenses lenses: [any SCSDKCameraKit.Lens])
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedActivityIndicatorShow(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedActivityIndicatorHide(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedRingLightShow(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedRingLightHide(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedFlashControlHide(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedSnapAttributionViewShow(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedSnapAttributionViewHide(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraControllerRequestedCameraFlip(_ controller: SCCameraKitReferenceUI.CameraController)
  @_Concurrency.MainActor @preconcurrency open func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, requestedHintDisplay hint: Swift.String, for lens: any SCSDKCameraKit.Lens, autohide: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency open func cameraController(_ controller: SCCameraKitReferenceUI.CameraController, requestedHintHideFor lens: any SCSDKCameraKit.Lens)
  @objc deinit
}
extension SCCameraKitReferenceUI.CameraViewController : SCSDKCameraKit.AdjustmentsProcessorObserver {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func processorUpdatedAdjustmentsAvailability(_ adjustmentsProcessor: any SCSDKCameraKit.AdjustmentsProcessor)
}
extension SCCameraKitReferenceUI.CameraViewController : SCCameraKitReferenceUI.CarouselViewDelegate, SCCameraKitReferenceUI.CarouselViewDataSource {
  @_Concurrency.MainActor @preconcurrency public func carouselView(_ view: SCCameraKitReferenceUI.CarouselView, didSelect item: SCCameraKitReferenceUI.CarouselItem, at index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func itemsForCarouselView(_ view: SCCameraKitReferenceUI.CarouselView) -> [SCCameraKitReferenceUI.CarouselItem]
}
extension SCCameraKitReferenceUI.CameraViewController : SCCameraKitReferenceUI.CameraButtonDelegate {
  @_Concurrency.MainActor @preconcurrency public func cameraButtonTapped(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  @_Concurrency.MainActor @preconcurrency public func cameraButtonHoldBegan(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  @_Concurrency.MainActor @preconcurrency public func cameraButtonHoldCancelled(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
  @_Concurrency.MainActor @preconcurrency public func cameraButtonHoldEnded(_ cameraButton: SCCameraKitReferenceUI.CameraButton)
}
extension SCCameraKitReferenceUI.CameraViewController : SCCameraKitReferenceUI.FlashControlViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, updatedRingLightValue value: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, selectedRingLightColor color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func flashControlView(_ view: SCCameraKitReferenceUI.FlashControlView, updatedFlashMode flashMode: SCCameraKitReferenceUI.CameraController.FlashMode)
}
extension SCCameraKitReferenceUI.CameraViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic open func presentationControllerWillDismiss(_ presentationController: UIKit.UIPresentationController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CarouselCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public let activityIndicatorView: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CarouselCollectionViewLayoutDelegate : AnyObject {
  func carouselLayout(_ layout: SCCameraKitReferenceUI.CarouselCollectionViewLayout, willTargetIndex index: Swift.Int)
}
public protocol CarouselCollectionViewLayoutDataSource : AnyObject {
  func carouselLayout(_ layout: SCCameraKitReferenceUI.CarouselCollectionViewLayout, transformForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGAffineTransform
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CarouselCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.CarouselCollectionViewLayoutDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var dataSource: (any SCCameraKitReferenceUI.CarouselCollectionViewLayoutDataSource)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreFoundation.CGPoint, withScrollingVelocity velocity: CoreFoundation.CGPoint) -> CoreFoundation.CGPoint
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CarouselImageLoader : AnyObject {
  func loadImage(url: Foundation.URL, completion: ((_ image: UIKit.UIImage?, _ error: (any Swift.Error)?) -> Swift.Void)?)
  func loadImage(url: Foundation.URL, cachePolicy: Foundation.URLRequest.CachePolicy, queue: Dispatch.DispatchQueue, completion: ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)?)
  func cancelImageLoad(from url: Foundation.URL)
}
public class DefaultCarouselImageLoader : SCCameraKitReferenceUI.CarouselImageLoader {
  final public let urlSession: Foundation.URLSession
  public init(urlSession: Foundation.URLSession = .shared)
  public func loadImage(url: Foundation.URL, completion: ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)?)
  public func loadImage(url: Foundation.URL, cachePolicy: Foundation.URLRequest.CachePolicy = .useProtocolCachePolicy, queue: Dispatch.DispatchQueue, completion: ((UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)?)
  public func cancelImageLoad(from url: Foundation.URL)
  @objc deinit
}
public class CarouselItem : Swift.Identifiable, Swift.Equatable {
  final public let id: Swift.String
  final public let lensId: Swift.String
  final public let groupId: Swift.String
  final public let imageUrl: Foundation.URL?
  public var image: UIKit.UIImage?
  public init(lensId: Swift.String, groupId: Swift.String, imageUrl: Foundation.URL? = nil, image: UIKit.UIImage? = nil)
  public static func == (lhs: SCCameraKitReferenceUI.CarouselItem, rhs: SCCameraKitReferenceUI.CarouselItem) -> Swift.Bool
  public typealias ID = Swift.String
  @objc deinit
}
public class EmptyItem : SCCameraKitReferenceUI.CarouselItem {
  public init()
  @objc deinit
}
public protocol CarouselViewDelegate : AnyObject {
  func carouselView(_ view: SCCameraKitReferenceUI.CarouselView, didSelect item: SCCameraKitReferenceUI.CarouselItem, at index: Swift.Int)
}
public protocol CarouselViewDataSource : AnyObject {
  func itemsForCarouselView(_ view: SCCameraKitReferenceUI.CarouselView) -> [SCCameraKitReferenceUI.CarouselItem]
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CarouselView : UIKit.UIView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.CarouselViewDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var dataSource: (any SCCameraKitReferenceUI.CarouselViewDataSource)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func reloadData()
  @_Concurrency.MainActor @preconcurrency public var selectedItem: SCCameraKitReferenceUI.CarouselItem {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func selectItem(_ selected: SCCameraKitReferenceUI.CarouselItem) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func hideCarousel()
  @_Concurrency.MainActor @preconcurrency public func showCarousel()
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
extension SCCameraKitReferenceUI.CarouselView : SCCameraKitReferenceUI.CarouselCollectionViewLayoutDelegate {
  @_Concurrency.MainActor @preconcurrency public func carouselLayout(_ layout: SCCameraKitReferenceUI.CarouselCollectionViewLayout, willTargetIndex index: Swift.Int)
}
extension SCCameraKitReferenceUI.CarouselView : SCCameraKitReferenceUI.CarouselCollectionViewLayoutDataSource {
  @_Concurrency.MainActor @preconcurrency public func carouselLayout(_ layout: SCCameraKitReferenceUI.CarouselCollectionViewLayout, transformForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGAffineTransform
}
@_hasMissingDesignatedInitializers public class BundleHelper {
  public class var resourcesBundle: Foundation.Bundle {
    get
  }
  @objc deinit
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func applyCameraActionButtonShadow()
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public static func controlDismissalHint() -> UIKit.UILabel
}
extension UIKit.UIImage {
  public func circleHighlightedImage(radius: CoreFoundation.CGFloat, color: UIKit.UIColor = .white) -> UIKit.UIImage?
}
public enum OutputSizeHelper {
  public static func normalizedSize(for size: CoreFoundation.CGSize, aspectRatio: CoreFoundation.CGFloat, orientation: AVFoundation.AVCaptureVideoOrientation = .portrait) -> CoreFoundation.CGSize
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.UInt, alpha: CoreFoundation.CGFloat = 1.0)
}
extension UIKit.UIFont {
  public static func sc_ultraLightFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public static func sc_regularFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public static func sc_mediumFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public static func sc_demiBoldFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public static func sc_boldFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
  public static func sc_heavyFont(size: CoreFoundation.CGFloat) -> UIKit.UIFont?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KeyboardAccessoryViewProvider : ObjectiveC.NSObject, SCSDKCameraKit.TextInputKeyboardAccessoryProvider {
  @objc final public let textView: UIKit.UITextView
  @objc final public let accessoryView: UIKit.UIView
  @objc public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public let maximumHeight: CoreFoundation.CGFloat
  @objc deinit
}
@objc extension Foundation.NSString {
  @objc dynamic public class func cameraKit_localized(key: Swift.String, bundle: Foundation.Bundle?, preferredLanguages: [Swift.String] = NSLocale.preferredLanguages, comment: Swift.String?, table: Swift.String? = nil) -> Swift.String
}
public func CameraKitLocalizedString(key: Swift.String, bundle: Foundation.Bundle? = nil, preferredLanguages: [Swift.String] = NSLocale.preferredLanguages, comment: Swift.String?, table: Swift.String? = nil) -> Swift.String
public protocol MediaPickerViewDelegate : ObjectiveC.NSObjectProtocol {
  func mediaPickerView(_ mediaPickerView: SCCameraKitReferenceUI.MediaPickerView, selectedAsset: any SCSDKCameraKit.LensMediaPickerProviderAsset)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MediaPickerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any SCCameraKitReferenceUI.MediaPickerViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var provider: (any SCSDKCameraKit.LensMediaPickerProvider)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension SCCameraKitReferenceUI.MediaPickerView : SCSDKCameraKit.LensMediaPickerProviderUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaPickerProviderRequestedUIPresentation(_ provider: any SCSDKCameraKit.LensMediaPickerProvider)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mediaPickerProviderRequestedUIDismissal(_ provider: any SCSDKCameraKit.LensMediaPickerProvider)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ImagePreviewViewController : SCCameraKitReferenceUI.PreviewViewController {
  @_Concurrency.MainActor @preconcurrency final public let image: UIKit.UIImage
  @_Concurrency.MainActor @preconcurrency public init(image: UIKit.UIImage)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override public func openSnapchatPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override public func sharePreviewPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override public func savePreviewPressed(_ sender: UIKit.UIButton)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PreviewViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var snapchatDelegate: (any SCCameraKitReferenceUI.SnapchatDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var onDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency open func openSnapchatPressed(_ sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor @preconcurrency open func savePreviewPressed(_ sender: UIKit.UIButton)
  @objc @_Concurrency.MainActor @preconcurrency open func sharePreviewPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VideoPreviewViewController : SCCameraKitReferenceUI.PreviewViewController {
  @_Concurrency.MainActor @preconcurrency final public let videoUrl: Foundation.URL
  @_Concurrency.MainActor @preconcurrency public init(videoUrl: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override public func openSnapchatPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override public func sharePreviewPressed(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor @preconcurrency @objc override public func savePreviewPressed(_ sender: UIKit.UIButton)
  @objc deinit
}
public class Recorder {
  final public let output: SCSDKCameraKit.AVWriterOutput
  public var horizontallyMirror: Swift.Bool
  public init(url: Foundation.URL, orientation: AVFoundation.AVCaptureVideoOrientation, size: CoreFoundation.CGSize) throws
  public func startRecording()
  public func finishRecording(completion: ((Foundation.URL?, (any Swift.Error)?) -> Swift.Void)?)
  public static func affineTransform(orientation: AVFoundation.AVCaptureVideoOrientation, mirrored: Swift.Bool) -> CoreFoundation.CGAffineTransform
  @objc deinit
}
public enum SnapchatScreen {
  case profile
  case lens(any SCSDKCameraKit.Lens)
  case photo(UIKit.UIImage)
  case video(Foundation.URL)
}
public protocol SnapchatDelegate : AnyObject {
  func cameraKitViewController(_ viewController: UIKit.UIViewController, openSnapchat screen: SCCameraKitReferenceUI.SnapchatScreen)
}
public protocol TestableElement {
  var id: Swift.String { get }
}
extension SCCameraKitReferenceUI.TestableElement where Self : Swift.RawRepresentable {
  public var id: Swift.String {
    get
  }
}
public enum CameraBottomBarElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case closeButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CameraElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case lensLabel
  case flipCameraButton
  case flashToggleButton
  case flashConfigurationButton
  case flashControl
  case flashControlDismissalHint
  case toneMapToggleButton
  case toneMapConfigurationButton
  case toneMapControl
  case toneMapControlDismissalHint
  case portraitToggleButton
  case portraitConfigurationButton
  case portraitControl
  case portraitControlDismissalHint
  case ringLightView
  case photoLibraryButton
  case cameraButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SCCameraKitReferenceUI.CameraElements {
  public enum CameraFlip {
    public static let front: Swift.String
    public static let back: Swift.String
  }
}
public enum CarouselElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case collectionView
  case lensCell
  case facadeSelectionRingView
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PreviewElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case closeButton
  case snapchatButton
  case shareButton
  case imageView
  case playerControllerView
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageNotificationElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case label
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FlashControlElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case flashModeSelector
  case ringLightColorSelector
  case ringLightIntensitySlider
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OtherElements : Swift.String, SCCameraKitReferenceUI.TestableElement {
  case noOpButton
  case arkitButton
  case agreementsButton
  case tapToFocusView
  case pairingButton
  case connectedLensStartButton
  case mirrorButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class UserDataProvider : ObjectiveC.NSObject, SCSDKCameraKit.UserDataProvider {
  @objc weak public var delegate: (any SCSDKCameraKit.UserDataProviderDelegate)?
  @objc public var userData: SCSDKCameraKit.UserData? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CameraBottomBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let snapButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let closeButton: UIKit.UIButton
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class MessageNotificationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let label: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class SnapAttributionView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let poweredByLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let snapIconImage: UIKit.UIImageView
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TapAnimationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public init(center: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public func show()
  @objc deinit
}
extension SCCameraKitReferenceUI.CameraController.FlashMode : Swift.Equatable {}
extension SCCameraKitReferenceUI.CameraController.FlashMode : Swift.Hashable {}
extension SCCameraKitReferenceUI.CameraController.FlashMode : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.AdjustmentControlView.Variant : Swift.Equatable {}
extension SCCameraKitReferenceUI.AdjustmentControlView.Variant : Swift.Hashable {}
extension SCCameraKitReferenceUI.AdjustmentControlView.Variant : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.CameraBottomBarElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.CameraBottomBarElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.CameraBottomBarElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.CameraElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.CameraElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.CameraElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.CarouselElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.CarouselElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.CarouselElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.PreviewElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.PreviewElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.PreviewElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.MessageNotificationElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.MessageNotificationElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.MessageNotificationElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.FlashControlElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.FlashControlElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.FlashControlElements : Swift.RawRepresentable {}
extension SCCameraKitReferenceUI.OtherElements : Swift.Equatable {}
extension SCCameraKitReferenceUI.OtherElements : Swift.Hashable {}
extension SCCameraKitReferenceUI.OtherElements : Swift.RawRepresentable {}
